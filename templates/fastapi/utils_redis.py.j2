#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Redis工具

这个模块提供了Redis客户端和相关工具函数。
"""

import json
from typing import Any, Optional, Union
from redis import Redis

from config.settings import settings

# 创建Redis客户端
_redis_client = None


def get_redis_client() -> Redis:
    """
    获取Redis客户端
    
    Returns:
        Redis: Redis客户端实例
    """
    global _redis_client
    if _redis_client is None:
        _redis_client = Redis.from_url(settings.REDIS_URL)
    return _redis_client


# 初始化Redis客户端实例
redis_client = get_redis_client()


def set_key(key: str, value: Any, expire: Optional[int] = None) -> bool:
    """
    设置Redis键值
    
    Args:
        key: 键名
        value: 值
        expire: 过期时间（秒）
        
    Returns:
        是否成功
    """
    try:
        if not isinstance(value, (str, bytes, int, float)):
            value = json.dumps(value)
        redis_client.set(key, value)
        if expire:
            redis_client.expire(key, expire)
        return True
    except Exception as e:
        print(f"Redis set error: {e}")
        return False


def get_key(key: str, default: Any = None) -> Any:
    """
    获取Redis键值
    
    Args:
        key: 键名
        default: 默认值
        
    Returns:
        键值或默认值
    """
    try:
        value = redis_client.get(key)
        if value is None:
            return default
        try:
            return json.loads(value)
        except (TypeError, json.JSONDecodeError):
            return value.decode() if isinstance(value, bytes) else value
    except Exception as e:
        print(f"Redis get error: {e}")
        return default


def delete_key(key: str) -> bool:
    """
    删除Redis键
    
    Args:
        key: 键名
        
    Returns:
        是否成功
    """
    try:
        return bool(redis_client.delete(key))
    except Exception as e:
        print(f"Redis delete error: {e}")
        return False