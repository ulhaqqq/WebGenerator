#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
数据库初始化脚本

这个脚本用于初始化数据库。
"""

import asyncio
import logging
import os
import sys

# 添加项目根目录到Python路径
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text

from app.db.base import Base
from config.settings import settings

{% if include_auth %}
from app.models.user import User
from app.utils.security import get_password_hash
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
{% endif %}

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def init_db() -> None:
    """
    初始化数据库
    """
    engine = create_async_engine(settings.DATABASE_URL)
    
    try:
        async with engine.begin() as conn:
            # 检查表是否已存在
            {% if db_type == 'mysql' %}
            result = await conn.execute(text("SHOW TABLES"))
            existing_tables = [row[0] for row in result.fetchall()]
            {% elif db_type == 'postgresql' %}
            result = await conn.execute(text("SELECT tablename FROM pg_tables WHERE schemaname = 'public'"))
            existing_tables = [row[0] for row in result.fetchall()]
            {% else %}
            result = await conn.execute(text("SELECT name FROM sqlite_master WHERE type='table'"))
            existing_tables = [row[0] for row in result.fetchall()]
            {% endif %}
            
            if not existing_tables:
                logger.info("创建数据库表...")
                await conn.run_sync(Base.metadata.create_all)
                logger.info("数据库表创建完成")
            else:
                logger.info(f"数据库表已存在: {existing_tables}，跳过创建")
        
        {% if include_auth %}
        # 创建管理员用户
        async with AsyncSession(engine) as session:
            # 检查是否已存在管理员用户
            result = await session.execute(select(User).filter(User.email == "admin@example.com"))
            admin = result.scalar_one_or_none()
            
            if not admin:
                admin = User(
                    email="admin@example.com",
                    username="admin",
                    hashed_password=get_password_hash("admin"),
                    is_active=True,
                    is_superuser=True
                )
                session.add(admin)
                await session.commit()
                logger.info("管理员用户已创建")
            else:
                logger.info("管理员用户已存在")
        {% endif %}
        
        logger.info("数据库初始化完成")
    
    except Exception as e:
        logger.error(f"数据库初始化失败: {e}")
        raise
    finally:
        await engine.dispose()


if __name__ == "__main__":
    logger.info("初始化数据库...")
    asyncio.run(init_db())