# {{ project_name }} 项目文档

## 项目概述

{{ project_name }} 是一个基于 {{ framework }} 框架开发的 Web 应用程序，使用 {{ database }} 作为数据库。

## 快速开始

### 环境要求

- Python 3.8+
- {{ database }}
{% if use_redis %}
- Redis
{% endif %}

### 安装

1. 克隆项目代码

```bash
git clone <项目仓库URL>
cd {{ project_name }}
```

2. 创建并激活虚拟环境

```bash
python -m venv venv
source venv/bin/activate  # Linux/Mac
# 或
venv\Scripts\activate  # Windows
```

3. 安装依赖

```bash
pip install -r requirements.txt
```

4. 配置环境变量

编辑 `.env` 文件（已自动生成），并根据实际情况修改配置：

```bash
# .env 文件已自动生成，直接编辑即可
# 编辑 .env 文件
```

5. 初始化数据库

```bash
python -m scripts.db_init
```

6. 运行应用

```bash
python run.py
```

应用将在 http://localhost:5000 上运行。

### 使用 Docker 运行

如果你安装了 Docker 和 Docker Compose，可以使用以下命令启动应用：

```bash
docker-compose up -d
```

## 项目结构

```
{{ project_name }}/
├── app/                    # 应用主目录
│   ├── __init__.py         # 应用初始化
│   ├── api/                # API 模块
│   │   ├── __init__.py
│   │   └── routes.py       # API 路由定义
│   ├── models/             # 数据模型
│   │   ├── __init__.py
│   │   ├── base.py         # 基础模型
│   │   └── database.py     # 数据库配置
│   ├── schemas/            # 数据验证模式
│   │   └── __init__.py
│   ├── services/           # 业务逻辑服务
│   │   └── __init__.py
│   ├── templates/          # HTML 模板
│   │   ├── base.html
│   │   └── index.html
│   ├── static/             # 静态资源
│   │   ├── css/
│   │   │   └── style.css
│   │   └── js/
│   │       └── main.js
│   └── utils/              # 工具函数
│       ├── __init__.py
│       └── helpers.py
├── config/                 # 配置模块
│   ├── __init__.py
│   └── settings.py         # 应用配置
├── docs/                   # 文档
│   ├── api.md              # API 文档
│   └── index.md            # 主文档
├── migrations/             # 数据库迁移
├── scripts/                # 脚本
│   └── db_init.py          # 数据库初始化脚本
├── tests/                  # 测试
│   ├── __init__.py
│   ├── conftest.py         # 测试配置
│   └── test_api.py         # API 测试
├── .env                    # 环境变量
├── .gitignore              # Git 忽略文件
├── docker-compose.yml      # Docker Compose 配置
├── Dockerfile              # Docker 配置
├── mkdocs.yml              # MkDocs 配置
├── pytest.ini              # Pytest 配置
├── README.md               # 项目说明
├── requirements.txt        # 依赖列表
└── run.py                  # 应用入口
```

## 开发指南

### 添加新的 API 端点

1. 在 `app/api/routes.py` 中定义新的路由
2. 如果需要，在 `app/models/` 中添加相应的数据模型
3. 如果需要，在 `app/schemas/` 中添加数据验证模式
4. 如果需要，在 `app/services/` 中添加业务逻辑服务
5. 在 `tests/test_api.py` 中添加测试

### 数据库迁移

使用 Flask-Migrate 进行数据库迁移：

```bash
# 初始化迁移
flask db init

# 创建迁移脚本
flask db migrate -m "迁移说明"

# 应用迁移
flask db upgrade
```

### 运行测试

```bash
pytest
```

### 生成文档

项目使用 MkDocs 生成文档：

```bash
# 本地预览文档
mkdocs serve

# 构建文档
mkdocs build
```

## 部署

### 传统部署

1. 设置生产环境配置
2. 使用 Gunicorn 或 uWSGI 作为 WSGI 服务器
3. 配置 Nginx 作为反向代理

### Docker 部署

```bash
# 构建镜像
docker-compose build

# 启动服务
docker-compose up -d
```

## 常见问题

### 数据库连接问题

确保数据库服务正在运行，并且连接配置正确。检查 `.env` 文件中的数据库配置。

### 依赖安装失败

尝试更新 pip 并重新安装依赖：

```bash
pip install --upgrade pip
pip install -r requirements.txt
```

## 贡献指南

1. Fork 项目
2. 创建特性分支 (`git checkout -b feature/amazing-feature`)
3. 提交更改 (`git commit -m 'Add some amazing feature'`)
4. 推送到分支 (`git push origin feature/amazing-feature`)
5. 创建 Pull Request

## 许可证

本项目采用 MIT 许可证 - 详情请参阅 [LICENSE](LICENSE) 文件。